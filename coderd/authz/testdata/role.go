package testdata

import (
	. "github.com/coder/coder/coderd/authz"
)

var _ Permission

// Role can print all possible permutations of the given iterators.
type Role struct {
	// ReturnSize is how many permissions are the returned set for the role
	ReturnSize int
	// N is the total number of permutations of sets this role will produce.
	N              int
	PermissionSets []iterator
	// This is kinda werird, but the first scan should not move anything.
	first bool

	buffer []*Permission
}

func NewRole(sets ...iterable) *Role {
	setInterfaces := make([]iterator, 0, len(sets))
	var retSize int
	var size int = 1
	for _, s := range sets {
		v := s.Iterator()
		setInterfaces = append(setInterfaces, v)
		retSize += v.ReturnSize()
		// size is the cross product of all iterator sets
		size *= v.Size()
	}
	return &Role{
		ReturnSize:     retSize,
		N:              size,
		PermissionSets: setInterfaces,
		buffer:         make([]*Permission, retSize),
	}
}

// Permissions returns the set of permissions for the role for a given permutation generated by 'Next()'
func (r *Role) Permissions() Set {
	var i int
	for _, ps := range r.PermissionSets {
		i += copy(r.buffer[i:], ps.Permissions())
	}
	//all := make(Set, 0, r.ReturnSize)
	//for _, set := range r.PermissionSets {
	//	all = append(all, set.Permissions()...)
	//}
	return r.buffer
}

func (r *Role) Each(ea func(set Set)) {
	for r.Next() {
		ea(r.Permissions())
	}
}

// Next will grab the next cross-product permutation of all permissions of r.
func (r *Role) Next() bool {
	if !r.first {
		r.first = true
		return true
	}
	for i := range r.PermissionSets {
		if r.PermissionSets[i].Next() {
			break
		} else {
			r.PermissionSets[i].Reset()
			if i == len(r.PermissionSets)-1 {
				return false
			}
		}
	}
	return true
}

func (r *Role) Reset() {
	for _, ps := range r.PermissionSets {
		ps.Reset()
	}
}
